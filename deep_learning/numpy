1. a = [0.56986626 0.21171809 0.56433414 0.54352271 0.67788685]
   a.T = [0.56986626 0.21171809 0.56433414 0.54352271 0.67788685]
	 np.dot(a, a.T)=1.442992640761643
	 b = [[0.07479112]
 			 [0.51274833]
			 [0.86830956]
			 [0.21109023]
			 [0.05597605]]
	 b.T = [[0.07479112, 0.51274833, 0.86830956, 0.21109023, 0.05597605]]
	 np.dot(b, b.T) = [[0.00559371, 0.03834902, 0.06494184, 0.01578767, 0.00418651],
       [0.03834902, 0.26291085, 0.44522428, 0.10823616, 0.02870163],
       [0.06494184, 0.44522428, 0.7539615 , 0.18329167, 0.04860454],
       [0.01578767, 0.10823616, 0.18329167, 0.04455909, 0.011816  ],
       [0.00418651, 0.02870163, 0.04860454, 0.011816  , 0.00313332]]

2.rand和randn
	numpy中有一些常用的用来产生随机数的函数，randn()和rand()就属于这其中。 
	numpy.random.randn(d0, d1, …, dn)是从标准正态分布中返回一个或多个样本值。 
	 	numpy.random.rand(d0, d1, …, dn)的随机样本位于[0, 1)中。 
3.A = np.array([[56.0, 0.0, 4.4, 68.0],
              [1.2, 104.0, 52.0, 8.0],
              [1.8, 135.0, 99.0, 0.9]])
	cal = A.sum(axis=0)计算列的和
4.reshape(1, 4)一行四列
5.np.array([[1,2,3],[4,5,6]])+np.array([100, 200, 300])
	输出 array([[101, 202, 303],
       [104, 205, 306]])
6.np.array()是生成一个数组
7.np.array([[1,2,3],[4,5,6]])+np.array([[100],[200]])
  输出array([[101, 102, 103],
       [204, 205, 206]])
8.关于数组维数问题
    reshape函数：不改变原数组维度，有返回值
    resize函数：直接改变原数组维度，无返回值
    shape属性：直接改变原数组维度
9.ravel & flatten 将数组变为一维
    两个函数都不会改变原数组维度
    区别在于：ravel、flatt函数都返回一维数组的一个视图（View）
    但是flatten函数还会请求分配内存来保存结果
    >>> a
    array([[[ 0,  1],
            [ 2,  3],
            [ 4,  5]],

           [[ 6,  7],
            [ 8,  9],
            [10, 11]]])
    >>> a.ravel()
    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
    >>> a
    array([[[ 0,  1],
            [ 2,  3],
            [ 4,  5]],

           [[ 6,  7],
            [ 8,  9],
            [10, 11]]])
    >>> a.flatten()
    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
    >>> a
    array([[[ 0,  1],
            [ 2,  3],
            [ 4,  5]],

           [[ 6,  7],
            [ 8,  9],
            [10, 11]]])
10. np.squeeze
	从数组的形状中删除单维条目，即把shape中为1的维度去掉
	x = np.array([[[0], [1], [2]]])
    print(x)
    """
    x=

    [[[0]
      [1]
      [2]]]
    """
    print(x.shape)  # (1, 3, 1)

    x1 = np.squeeze(x)  # 从数组的形状中删除单维条目，即把shape中为1的维度去掉

    print(x1)  # [0 1 2]
    print(x1.shape)  # (3,)
11. train_set_x_orig.reshape(m_train, -1)
    新数组的shape属性应该要与原来数组的一致，即新数组元素数量与原数组元素数量要相等。一个参数为-1时，那么reshape函数会根据另一个参数的维度计算出数组的另外一个shape属性值。
12.
	1. np.multiply()函数
    函数作用

    数组和矩阵对应位置相乘，输出与相乘数组/矩阵的大小一致

    1.1数组场景
        A = np.arange(1,5).reshape(2,2)

        A
        array([[1, 2],
               [3, 4]])

        B = np.arange(0,4).reshape(2,2)

        B
        array([[0, 1],
               [2, 3]])

        np.multiply(A,B)       #数组对应元素位置相乘

        array([[ 0,  2],
               [ 6, 12]])


    1.2 矩阵场景
        np.multiply(np.mat(A),np.mat(B))     #矩阵对应元素位置相乘，利用np.mat()将数组转换为矩阵

        matrix([[ 0,  2],
                [ 6, 12]])

        np.sum(np.multiply(np.mat(A),np.mat(B)))    #输出为标量

        2. np.dot()函数
        函数作用

        对于秩为1的数组，执行对应位置相乘，然后再相加；

        对于秩不为1的二维数组，执行矩阵乘法运算；超过二维的可以参考numpy库介绍。

        2.1 数组场景
        2.1.1 数组秩不为1的场景
        A = np.arange(1,5).reshape(2,2)
        A
        array([[1, 2],
               [3, 4]])
        B = np.arange(0,4).reshape(2,2)
        B

        array([[0, 1],
               [2, 3]])

        np.dot(A,B)    #对数组执行矩阵相乘运算
        1
        array([[ 4,  7],
               [ 8, 15]])

        2.1.2 数组秩为1的场景
        C = np.arange(1,4)
        C
        array([1, 2, 3])

        D = np.arange(0,3)
        D

        array([0, 1, 2])

        np.dot(C,D)   #对应位置相乘，再求和
        1
        8

    2.2 矩阵场景
        np.dot(np.mat(A),np.mat(B))   #执行矩阵乘法运算

        matrix([[ 4,  7],
                [ 8, 15]])

    3. 星号（*）乘法运算
        作用

        对数组执行对应位置相乘

        对矩阵执行矩阵乘法运算

    3.1 数组场景
        A = np.arange(1,5).reshape(2,2)
        A
        array([[1, 2],
               [3, 4]])

        B = np.arange(0,4).reshape(2,2)
        B
        array([[0, 1],
               [2, 3]])

        A*B  #对应位置点乘
        1
        array([[ 0,  2],
               [ 6, 12]])

    3.2矩阵场景
        (np.mat(A))*(np.mat(B))  #执行矩阵运算
        1
        matrix([[ 4,  7],
                [ 8, 15]])

13.Numpy.random中shuffle与permutation的区别
    函数shuffle与permutation都是对原来的数组进行重新洗牌（即随机打乱原来的元素顺序）
    ；区别在于shuffle直接在原来的数组上进行操作，改变原来数组的顺序，无返回值。
    而permutation不直接在原来的数组上进行操作，而是返回一个新的打乱顺序的数组，并不改变原来的数组。

<<<<<<< HEAD
14.改变矩阵维度expand_dims(a, axis)
    其实感觉expand_dims(a, axis)就是在axis的那一个轴上把数据加上去，这个数据在axis这个轴的0位置。 
    例如原本为一维的2个数据，axis=0，则shape变为(1,2),axis=1则shape变为(2,1) 
    再例如 原本为 (2,3),axis=0，则shape变为(1,2,3),axis=1则shape变为(2,1,3)



=======
>>>>>>> 45cc7e7f3f503fc409f3d8a647d0243e366bdf8d
    
	
